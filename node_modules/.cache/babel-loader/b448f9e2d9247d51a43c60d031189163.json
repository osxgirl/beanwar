{"ast":null,"code":"var _jsxFileName = \"/Users/heather/Development/code/beanwar/src/App.js\";\nimport React from 'react';\nimport './App.css'; // A standard deck of 52 cards. Face cards have numeric names (e.g., '14clubs' is Ace of Clubs).\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar Cards = ['2hearts', '2clubs', '2spades', '2diamonds', '3hearts', '3clubs', '3spades', '3diamonds', '4hearts', '4clubs', '4spades', '4diamonds', '5hearts', '5clubs', '5spades', '5diamonds', '6hearts', '6clubs', '6spades', '6diamonds', '7hearts', '7clubs', '7spades', '7diamonds', '8hearts', '8clubs', '8spades', '8diamonds', '9hearts', '9clubs', '9spades', '9diamonds', '10hearts', '10clubs', '10spades', '10diamonds', '11hearts', '11clubs', '11spades', '11diamonds', '12hearts', '12clubs', '12spades', '12diamonds', '13hearts', '13clubs', '13spades', '13diamonds', '14hearts', '14clubs', '14spades', '14diamonds'];\nvar GameStatus = {\n  notStarted: 0,\n  finished: 1,\n  inProgress: 2\n};\n\nvar createReactClass = require('create-react-class');\n\nvar StatusComponent = createReactClass({\n  displayName: \"StatusComponent\",\n  render: function () {\n    var winner = this.props.currentWinner;\n    var status = this.props.status;\n    var won = this.props.cardsWon;\n    var war = this.props.wasWar;\n    var message = '';\n\n    if (status === GameStatus.notStarted || winner === null) {\n      message = '';\n    } else if (status === GameStatus.finished) {\n      message = 'Player ' + winner + ' won the game!';\n    } else {\n      if (war) {\n        message += 'WAR! ';\n      }\n\n      message += 'Player ' + winner + ' won ' + won + ' cards.';\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this);\n  }\n}); // Button for dealing initial hand and playing rounds.\n\n_c = StatusComponent;\nvar ButtonComponent = createReactClass({\n  displayName: \"ButtonComponent\",\n  render: function () {\n    var text_options = ['Deal Cards', 'Play Again', 'Next Round'];\n    var button_text = text_options[this.props.status];\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn-primary\",\n      onClick: this.props.clickHandler,\n      children: button_text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this);\n  }\n}); // Display card images, and # of cards left in player's deck\n\n_c2 = ButtonComponent;\nvar CardComponent = createReactClass({\n  displayName: \"CardComponent\",\n  cardImage: function (card) {\n    var cardImageFile = 'back.svg';\n\n    if (card) {\n      cardImageFile = card + '.svg';\n    }\n\n    return '/images/cards/' + cardImageFile;\n  },\n  render: function () {\n    var cardCount = this.props.cardCount;\n    var currentCard = this.props.currentCard;\n    var count = \"\";\n\n    if (cardCount) {\n      count = /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [cardCount, \" cards remaining\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"\",\n          src: this.cardImage(currentCard)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this);\n  }\n}); // Play the game.\n\n_c3 = CardComponent;\nvar GameComponent = createReactClass({\n  displayName: \"GameComponent\",\n  startGame: function () {\n    var cardArray = Cards.slice(); // 'Shuffle' the cards \n    // JS doesn't do array 'shuffling' easily--\n    // this code's cribbed from the Knuth shuffle: https://github.com/Daplie/knuth-shuffle\n\n    var currentIndex = cardArray.length;\n    var tempValue;\n    var randomIndex; // While there remain elements to shuffle...\n\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1; // And swap it with the current element.\n\n      tempValue = cardArray[currentIndex];\n      cardArray[currentIndex] = cardArray[randomIndex];\n      cardArray[randomIndex] = tempValue;\n    } // Deal the entire deck, set initial state, \n    // and update game status from notStarted to inProgress\n\n\n    this.setState({\n      playerADeck: cardArray.slice(0, 26),\n      playerBDeck: cardArray.slice(26),\n      status: GameStatus.inProgress,\n      currentWinner: null,\n      currentWasWar: null,\n      currentCardsWon: null\n    });\n  },\n  playGame: function () {\n    var won = [];\n    var aDeck = this.state.playerADeck;\n    var bDeck = this.state.playerBDeck;\n    var complete = false;\n    var nextStatus = GameStatus.inProgress;\n    var isWar = false;\n\n    while (!complete) {\n      var aCard = aDeck.shift(); // get a card for Player A\n\n      var bCard = bDeck.shift(); // get a card for Player B\n\n      var winner;\n      won.push(aCard, bCard);\n      var caVal = parseInt(aCard.split('_')[0], 10);\n      var cbVal = parseInt(bCard.split('_')[0], 10);\n\n      if (caVal === cbVal) {\n        // Equal value cards? WAR\n        isWar = true; // Out of cards? Game over.\n\n        if (aDeck.length < 2) {\n          winner = 'B';\n          nextStatus = GameStatus.finished; // Player B wins the game\n\n          complete = true;\n        } else if (bDeck.length < 2) {\n          winner = 'A';\n          nextStatus = GameStatus.finished; // Player A wins the game\n\n          complete = true;\n        } else {\n          won.push(aDeck.shift(), bDeck.shift());\n          aCard = aDeck.shift();\n          bCard = bDeck.shift();\n          won.push(aCard, bCard);\n          caVal = parseInt(aCard.split('_')[0], 10);\n          cbVal = parseInt(bCard.split('_')[0], 10);\n\n          if (caVal !== cbVal) {\n            complete = true;\n\n            if (caVal > cbVal) {\n              winner = 'A';\n              aDeck.push.apply(aDeck, won);\n            } else {\n              winner = 'B';\n              bDeck.push.apply(bDeck, won);\n            }\n          }\n        }\n      } else {\n        complete = true;\n\n        if (caVal > cbVal) {\n          winner = 'A';\n          aDeck.push.apply(aDeck, won);\n        } else {\n          winner = 'B';\n          bDeck.push.apply(bDeck, won);\n        }\n      }\n    }\n\n    if (!aDeck.length || !bDeck.length) {\n      // Out of cards? Game over.\n      nextStatus = GameStatus.finished;\n    }\n\n    this.setState({\n      status: nextStatus,\n      currentWinner: winner,\n      currentWasWar: isWar,\n      currentCardsWon: won.length,\n      playerACurrentCard: aCard,\n      playerBCurrentCard: bCard,\n      playerADeck: aDeck,\n      playerBDeck: bDeck\n    });\n  },\n  clickHandler: function () {\n    switch (this.state.status) {\n      case GameStatus.notStarted:\n        this.startGame();\n        break;\n\n      case GameStatus.inProgress:\n        this.playGame();\n        break;\n\n      case GameStatus.finished:\n        this.startGame();\n        break;\n\n      default:\n        this.startGame();\n    }\n  },\n  getInitialState: function () {\n    return {\n      playerADeck: null,\n      playerBDeck: null,\n      playerACurrentCard: null,\n      playerBCurrentCard: null,\n      status: GameStatus.notStarted,\n      currentWinner: null,\n      currentWasWar: null,\n      currentCardsWon: null\n    };\n  },\n  render: function () {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-sm-12 title text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/public/beanwar.svg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 61\n          }, this), \" \\u2615\\uFE0F \\uD83D\\uDD2B \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-sm-4 player text-center\",\n          children: \"Player A\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-sm-4 col-sm-offset-4 player text-center\",\n          children: \"Player B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-sm-4\",\n          children: /*#__PURE__*/_jsxDEV(CardComponent, {\n            cardCount: this.state.playerADeck ? this.state.playerADeck.length : null,\n            currentCard: this.state.playerACurrentCard\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 22\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-sm-4 text-center\",\n          children: [/*#__PURE__*/_jsxDEV(ButtonComponent, {\n            clickHandler: this.clickHandler,\n            status: this.state.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm-12 text-center\",\n              children: /*#__PURE__*/_jsxDEV(StatusComponent, {\n                currentWinner: this.state.currentWinner,\n                wasWar: this.state.currentWasWar,\n                cardsWon: this.state.currentCardsWon,\n                status: this.state.status\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 22\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-sm-4\",\n          children: /*#__PURE__*/_jsxDEV(CardComponent, {\n            cardCount: this.state.playerBDeck ? this.state.playerBDeck.length : null,\n            currentCard: this.state.playerBCurrentCard\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 18\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 11\n    }, this);\n  }\n});\nexport default GameComponent;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StatusComponent\");\n$RefreshReg$(_c2, \"ButtonComponent\");\n$RefreshReg$(_c3, \"CardComponent\");","map":{"version":3,"sources":["/Users/heather/Development/code/beanwar/src/App.js"],"names":["React","Cards","GameStatus","notStarted","finished","inProgress","createReactClass","require","StatusComponent","render","winner","props","currentWinner","status","won","cardsWon","war","wasWar","message","ButtonComponent","text_options","button_text","clickHandler","CardComponent","cardImage","card","cardImageFile","cardCount","currentCard","count","GameComponent","startGame","cardArray","slice","currentIndex","length","tempValue","randomIndex","Math","floor","random","setState","playerADeck","playerBDeck","currentWasWar","currentCardsWon","playGame","aDeck","state","bDeck","complete","nextStatus","isWar","aCard","shift","bCard","push","caVal","parseInt","split","cbVal","apply","playerACurrentCard","playerBCurrentCard","getInitialState"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\n// A standard deck of 52 cards. Face cards have numeric names (e.g., '14clubs' is Ace of Clubs).\n\nvar Cards = [\n    '2hearts', '2clubs', '2spades', '2diamonds', \n    '3hearts', '3clubs', '3spades', '3diamonds', \n    '4hearts', '4clubs', '4spades', '4diamonds', \n    '5hearts', '5clubs', '5spades', '5diamonds', \n    '6hearts', '6clubs', '6spades', '6diamonds', \n    '7hearts', '7clubs', '7spades', '7diamonds', \n    '8hearts', '8clubs', '8spades', '8diamonds', \n    '9hearts', '9clubs', '9spades', '9diamonds', \n    '10hearts', '10clubs', '10spades', '10diamonds', \n    '11hearts', '11clubs', '11spades', '11diamonds', \n    '12hearts', '12clubs', '12spades', '12diamonds', \n    '13hearts', '13clubs', '13spades', '13diamonds', \n    '14hearts', '14clubs', '14spades', '14diamonds'\n    ]\n\n\nvar GameStatus = { notStarted: 0, finished: 1, inProgress: 2 }\nvar createReactClass = require('create-react-class');\n\nvar StatusComponent = createReactClass({\n    render: function() {\n        var winner = this.props.currentWinner;\n        var status = this.props.status;\n        var won = this.props.cardsWon;\n        var war = this.props.wasWar;\n        var message = '';\n        if (status === GameStatus.notStarted || winner === null) {\n            message = '';\n        } else if (status === GameStatus.finished) {\n            message = 'Player ' + winner + ' won the game!';\n        } else {\n            if (war) {\n                message += 'WAR! ';\n            }\n            message += 'Player ' + winner + ' won ' + won + ' cards.';\n        }\n        return (\n            <div>{message}</div>\n        );\n    }\n});\n\n// Button for dealing initial hand and playing rounds.\nvar ButtonComponent = createReactClass({\n    render: function() {\n        var text_options = ['Deal Cards', 'Play Again', 'Next Round'];\n        var button_text = text_options[this.props.status];\n        return (\n            <button className=\"btn-primary\" onClick={this.props.clickHandler}>{button_text}</button>\n        );\n    }\n});\n\n\n// Display card images, and # of cards left in player's deck\n\nvar CardComponent = createReactClass({\n    cardImage: function(card) {\n        var cardImageFile = 'back.svg'\n        if (card) {\n            cardImageFile = card + '.svg'\n        }\n        return ('/images/cards/' + cardImageFile);\n    },\n    render: function() {\n        var cardCount = this.props.cardCount;\n        var currentCard = this.props.currentCard;\n        var count = \"\";\n        if (cardCount) {\n            count = <p>{cardCount} cards remaining</p>;\n        }\n        return (\n            <div>\n                <p><img alt=\"\" src={this.cardImage(currentCard)} /></p>\n                {count}\n            </div>\n        )\n    }\n});\n\n// Play the game.\n\nvar GameComponent = createReactClass({\n    startGame: function() {\n        var cardArray = Cards.slice();\n\n        // 'Shuffle' the cards \n        // JS doesn't do array 'shuffling' easily--\n        // this code's cribbed from the Knuth shuffle: https://github.com/Daplie/knuth-shuffle\n        var currentIndex = cardArray.length;\n        var tempValue;\n        var randomIndex;\n\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n            // Pick a remaining element...\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n            // And swap it with the current element.\n            tempValue = cardArray[currentIndex];\n            cardArray[currentIndex] = cardArray[randomIndex];\n            cardArray[randomIndex] = tempValue;\n        }\n\n        // Deal the entire deck, set initial state, \n        // and update game status from notStarted to inProgress\n        this.setState({\n            playerADeck: cardArray.slice(0, 26),\n            playerBDeck: cardArray.slice(26),\n            status: GameStatus.inProgress,\n            currentWinner: null,\n            currentWasWar: null,\n            currentCardsWon: null\n        });\n\n    },\n    playGame: function() {\n        var won = []; \n        var aDeck = this.state.playerADeck;\n        var bDeck = this.state.playerBDeck;\n        var complete = false;\n        var nextStatus = GameStatus.inProgress;\n        var isWar = false;\n\n        while (!complete) {\n            var aCard = aDeck.shift(); // get a card for Player A\n            var bCard = bDeck.shift(); // get a card for Player B\n            var winner;\n            won.push(aCard, bCard);\n            var caVal = parseInt(aCard.split('_')[0], 10);\n            var cbVal = parseInt(bCard.split('_')[0], 10);\n\n            if (caVal === cbVal) {  // Equal value cards? WAR\n                isWar = true;\n                // Out of cards? Game over.\n                if (aDeck.length < 2) { \n                    winner = 'B';\n                    nextStatus = GameStatus.finished; // Player B wins the game\n                    complete = true;\n                } else if (bDeck.length < 2) {\n                    winner = 'A';\n                    nextStatus = GameStatus.finished; // Player A wins the game\n                    complete = true;\n                } else { \n                    won.push(aDeck.shift(), bDeck.shift());\n                    aCard = aDeck.shift();\n                    bCard = bDeck.shift();\n                    won.push(aCard, bCard);\n                    caVal = parseInt(aCard.split('_')[0], 10);\n                    cbVal = parseInt(bCard.split('_')[0], 10);\n                    if (caVal !== cbVal) {\n                        complete = true;\n                        if (caVal > cbVal) {\n                            winner = 'A';\n                            aDeck.push.apply(aDeck, won);\n                        } else {\n                            winner = 'B';\n                            bDeck.push.apply(bDeck, won);\n                        }\n                    }\n                }\n            } else {\n                complete = true;\n                if (caVal > cbVal) {\n                    winner = 'A';\n                    aDeck.push.apply(aDeck, won);\n                } else {\n                    winner = 'B';\n                    bDeck.push.apply(bDeck, won);\n                }\n            }\n\n        }\n        if (!aDeck.length || !bDeck.length) { // Out of cards? Game over.\n            nextStatus = GameStatus.finished;\n        }\n        this.setState({\n            status: nextStatus,\n            currentWinner: winner,\n            currentWasWar: isWar,\n            currentCardsWon: won.length,\n            playerACurrentCard: aCard,\n            playerBCurrentCard: bCard,\n            playerADeck: aDeck,\n            playerBDeck: bDeck\n        });\n    },\n    clickHandler: function() {\n        switch(this.state.status) {\n            case GameStatus.notStarted:\n                this.startGame();\n                break;\n            case GameStatus.inProgress:\n                this.playGame();\n                break;\n            case GameStatus.finished:\n                this.startGame();\n                break;\n            default:\n                this.startGame();\n        }\n    },\n    getInitialState: function() {\n        return ({\n            playerADeck: null,\n            playerBDeck: null,\n            playerACurrentCard: null,\n            playerBCurrentCard: null,\n            status: GameStatus.notStarted,\n            currentWinner: null,\n            currentWasWar: null,\n            currentCardsWon: null\n        })\n    },\n    render: function() {\n        return (\n          <div  className=\"container\">\n            <div className=\"row\">\n               <div className=\"col-sm-12 title text-center\"><img src=\"/public/beanwar.svg\"/> ☕️ 🔫 </div>\n           </div>\n           <div className=\"row\">\n               <div className=\"col-sm-4 player text-center\">Player A</div>\n               <div className=\"col-sm-4 col-sm-offset-4 player text-center\">Player B</div>\n           </div>\n            <div className=\"row\">\n                <div className=\"col-sm-4\">\n                     <CardComponent\n                          cardCount={this.state.playerADeck ? this.state.playerADeck.length : null }\n                          currentCard={this.state.playerACurrentCard}\n                      />\n                </div>\n                <div className=\"col-sm-4 text-center\">\n                      <ButtonComponent\n                          clickHandler={this.clickHandler}\n                          status={this.state.status}\n                      />\n                    <div className=\"row\">\n                     <div className=\"col-sm-12 text-center\">\n                        <StatusComponent\n                           currentWinner={this.state.currentWinner}\n                           wasWar={this.state.currentWasWar}\n                           cardsWon={this.state.currentCardsWon}\n                           status={this.state.status}\n                        />\n                        </div>\n                    </div>\n                </div>\n                 <div className=\"col-sm-4\">\n                      <CardComponent\n                           cardCount={this.state.playerBDeck ? this.state.playerBDeck.length : null }\n                           currentCard={this.state.playerBCurrentCard}\n                       />\n                </div>\n            </div>\n\n          </div>\n        );\n    }\n});\n\n\nexport default GameComponent;\n\n"]},"metadata":{},"sourceType":"module"}