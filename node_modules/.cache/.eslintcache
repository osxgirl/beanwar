[{"/Users/heather/Development/code/beanwar/src/index.js":"1","/Users/heather/Development/code/beanwar/src/App.js":"2","/Users/heather/Development/code/beanwar/src/components/Game.js":"3","/Users/heather/Development/code/beanwar/src/components/Login.js":"4"},{"size":405,"mtime":1627769108789,"results":"5","hashOfConfig":"6"},{"size":336,"mtime":1627769108787,"results":"7","hashOfConfig":"6"},{"size":9374,"mtime":1627769108788,"results":"8","hashOfConfig":"6"},{"size":250,"mtime":1627524580561,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vh95v3",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"/Users/heather/Development/code/beanwar/src/index.js",[],"/Users/heather/Development/code/beanwar/src/App.js",[],"/Users/heather/Development/code/beanwar/src/components/Game.js",["20"],"import React from 'react';\nimport '../App.css';\n\n\n\n// A standard deck of 52 cards. Face cards have numeric names (e.g., '14clubs' is Ace of Clubs).\n\nvar Cards = [\n    '2hearts', '2clubs', '2spades', '2diamonds', \n    '3hearts', '3clubs', '3spades', '3diamonds', \n    '4hearts', '4clubs', '4spades', '4diamonds', \n    '5hearts', '5clubs', '5spades', '5diamonds', \n    '6hearts', '6clubs', '6spades', '6diamonds', \n    '7hearts', '7clubs', '7spades', '7diamonds', \n    '8hearts', '8clubs', '8spades', '8diamonds', \n    '9hearts', '9clubs', '9spades', '9diamonds', \n    '10hearts', '10clubs', '10spades', '10diamonds', \n    '11hearts', '11clubs', '11spades', '11diamonds', \n    '12hearts', '12clubs', '12spades', '12diamonds', \n    '13hearts', '13clubs', '13spades', '13diamonds', \n    '14hearts', '14clubs', '14spades', '14diamonds'\n    ]\n\n\nvar GameStatus = { notStarted: 0, finished: 1, inProgress: 2 }\nvar createReactClass = require('create-react-class');\n\nvar StatusComponent = createReactClass({\n    render: function() {\n        var winner = this.props.currentWinner;\n        var status = this.props.status;\n        var won = this.props.cardsWon;\n        var war = this.props.wasWar;\n        var message = '';\n        if (status === GameStatus.notStarted || winner === null) {\n            message = '';\n        } else if (status === GameStatus.finished) {\n            message = 'Player ' + winner + ' won the game!';\n        } else {\n            if (war) {\n                message += 'WAR! ';\n            }\n            message += 'Player ' + winner + ' won ' + won + ' cards.';\n        }\n        return (\n            <div>{message}</div>\n        );\n    }\n});\n\n// Button for dealing initial hand and playing rounds.\nvar ButtonComponent = createReactClass({\n    render: function() {\n        var text_options = ['Deal Cards', 'Play Again', 'Next Round'];\n        var button_text = text_options[this.props.status];\n        return (\n            <button className=\"btn-primary\" onClick={this.props.clickHandler}>{button_text}</button>\n        );\n    }\n});\n\n\n// Display card images, and # of cards left in player's deck\n\nvar CardComponent = createReactClass({\n    cardImage: function(card) {\n        var cardImageFile = 'back.svg'\n        if (card) {\n            cardImageFile = card + '.svg'\n        }\n        return ('/images/cards/' + cardImageFile);\n    },\n    render: function() {\n        var cardCount = this.props.cardCount;\n        var currentCard = this.props.currentCard;\n        var count = \"\";\n        if (cardCount) {\n            count = <p>{cardCount} cards remaining</p>;\n        }\n        return (\n            <div>\n                <p><img alt=\"\" src={this.cardImage(currentCard)} /></p>\n                {count}\n            </div>\n        )\n    }\n});\n\n// Play the game.\n\nvar GameComponent = createReactClass({\n    startGame: function() {\n        var cardArray = Cards.slice();\n\n        // 'Shuffle' the cards \n        // JS doesn't do array 'shuffling' easily--\n        // this code's cribbed from the Knuth shuffle: https://github.com/Daplie/knuth-shuffle\n        var currentIndex = cardArray.length;\n        var tempValue;\n        var randomIndex;\n\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n            // Pick a remaining element...\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n            // And swap it with the current element.\n            tempValue = cardArray[currentIndex];\n            cardArray[currentIndex] = cardArray[randomIndex];\n            cardArray[randomIndex] = tempValue;\n        }\n\n        // Deal the entire deck, set initial state, \n        // and update game status from notStarted to inProgress\n        this.setState({\n            playerADeck: cardArray.slice(0, 26),\n            playerBDeck: cardArray.slice(26),\n            status: GameStatus.inProgress,\n            currentWinner: null,\n            currentWasWar: null,\n            currentCardsWon: null\n        });\n\n    },\n    playGame: function() {\n        var won = []; \n        var aDeck = this.state.playerADeck;\n        var bDeck = this.state.playerBDeck;\n        var complete = false;\n        var nextStatus = GameStatus.inProgress;\n        var isWar = false;\n\n        while (!complete) {\n            var aCard = aDeck.shift(); // get a card for Player A\n            var bCard = bDeck.shift(); // get a card for Player B\n            var winner;\n            won.push(aCard, bCard);\n            var caVal = parseInt(aCard.split('_')[0], 10);\n            var cbVal = parseInt(bCard.split('_')[0], 10);\n\n            if (caVal === cbVal) {  // Equal value cards? WAR\n                isWar = true;\n                // Out of cards? Game over.\n                if (aDeck.length < 2) { \n                    winner = 'B';\n                    nextStatus = GameStatus.finished; // Player B wins the game\n                    complete = true;\n                } else if (bDeck.length < 2) {\n                    winner = 'A';\n                    nextStatus = GameStatus.finished; // Player A wins the game\n                    complete = true;\n                } else { \n                    won.push(aDeck.shift(), bDeck.shift());\n                    aCard = aDeck.shift();\n                    bCard = bDeck.shift();\n                    won.push(aCard, bCard);\n                    caVal = parseInt(aCard.split('_')[0], 10);\n                    cbVal = parseInt(bCard.split('_')[0], 10);\n                    if (caVal !== cbVal) {\n                        complete = true;\n                        if (caVal > cbVal) {\n                            winner = 'A';\n                            aDeck.push.apply(aDeck, won);\n                        } else {\n                            winner = 'B';\n                            bDeck.push.apply(bDeck, won);\n                        }\n                    }\n                }\n            } else {\n                complete = true;\n                if (caVal > cbVal) {\n                    winner = 'A';\n                    aDeck.push.apply(aDeck, won);\n                } else {\n                    winner = 'B';\n                    bDeck.push.apply(bDeck, won);\n                }\n            }\n\n        }\n        if (!aDeck.length || !bDeck.length) { // Out of cards? Game over.\n            nextStatus = GameStatus.finished;\n        }\n        this.setState({\n            status: nextStatus,\n            currentWinner: winner,\n            currentWasWar: isWar,\n            currentCardsWon: won.length,\n            playerACurrentCard: aCard,\n            playerBCurrentCard: bCard,\n            playerADeck: aDeck,\n            playerBDeck: bDeck\n        });\n    },\n    clickHandler: function() {\n        switch(this.state.status) {\n            case GameStatus.notStarted:\n                this.startGame();\n                break;\n            case GameStatus.inProgress:\n                this.playGame();\n                break;\n            case GameStatus.finished:\n                this.startGame();\n                break;\n            default:\n                this.startGame();\n        }\n    },\n    getInitialState: function() {\n        return ({\n            playerADeck: null,\n            playerBDeck: null,\n            playerACurrentCard: null,\n            playerBCurrentCard: null,\n            status: GameStatus.notStarted,\n            currentWinner: null,\n            currentWasWar: null,\n            currentCardsWon: null\n        })\n    },\n    render: function() {\n        return (\n          <div  className=\"container\">\n            <div className=\"row\">\n               <div className=\"col-sm-12 title text-center\"><img src=\"/images/beanwar.svg\"/> ‚òïÔ∏è üî´ </div>\n           </div>\n           <div className=\"row\">\n               <div className=\"col-sm-4 player text-center\">Player A</div>\n               <div className=\"col-sm-4 col-sm-offset-4 player text-center\">Player B</div>\n           </div>\n            <div className=\"row\">\n                <div className=\"col-sm-4\">\n                     <CardComponent\n                          cardCount={this.state.playerADeck ? this.state.playerADeck.length : null }\n                          currentCard={this.state.playerACurrentCard}\n                      />\n                </div>\n                <div className=\"col-sm-4 text-center\">\n                      <ButtonComponent\n                          clickHandler={this.clickHandler}\n                          status={this.state.status}\n                      />\n                    <div className=\"row\">\n                     <div className=\"col-sm-12 text-center\">\n                        <StatusComponent\n                           currentWinner={this.state.currentWinner}\n                           wasWar={this.state.currentWasWar}\n                           cardsWon={this.state.currentCardsWon}\n                           status={this.state.status}\n                        />\n                        </div>\n                    </div>\n                </div>\n                 <div className=\"col-sm-4\">\n                      <CardComponent\n                           cardCount={this.state.playerBDeck ? this.state.playerBDeck.length : null }\n                           currentCard={this.state.playerBCurrentCard}\n                       />\n                </div>\n            </div>\n\n          </div>\n        );\n    }\n});\n\n\nexport default GameComponent;\n","/Users/heather/Development/code/beanwar/src/components/Login.js",[],["21","22"],{"ruleId":"23","severity":1,"message":"24","line":227,"column":61,"nodeType":"25","endLine":227,"endColumn":93},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["30"],"no-negated-in-lhs",["31"],"no-global-assign","no-unsafe-negation"]